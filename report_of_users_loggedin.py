0# -*- coding: utf-8 -*-
"""report_of_users_loggedin.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GFQRQo-nnXbYiXQJp6Zk2wRhhmzS8oFi

This is a script to find how many users are logged into the respective machine at the moment.

First we need to create a class called
'Event' which will store all instances of event such as:

- date of event
- type of event : such as login or logout.
- name of machine
- name of user on that machine
"""

class Event:
  def __init__(self, event_date, event_type, machine_name, user):
    self.date = event_date
    self.type = event_type
    self.machine = machine_name
    self.user = user

events = [
  Event('2020-01-21 12:45:46', 'login', 'myworkstation.local', 'jordan'),
  Event('2020-01-22 15:53:42', 'logout', 'webserver.local', 'jordan'),
  Event('2020-01-21 18:53:21', 'login', 'webserver.local', 'lane'),
  Event('2020-01-22 10:25:34', 'logout', 'myworkstation.local', 'jordan'),
  Event('2020-01-21 08:20:01', 'login', 'webserver.local', 'jordan'),
  Event('2020-01-23 11:24:35', 'login', 'mailserver.local', 'chris'),
]

for event in events:
  print(f"Date and time: {event.date} | Type: {event.type} | Machine: {event.machine} | User: {event.user}")

"""Here in the above i have created a 'Event' class and i have a entered a list of events happening in it.

If you want to display each event in the 'events' object, you can loop through it.

Or if you want to access only a specific event using indexing, see the code below :
"""

# Access the first event (index 0)
specific_event = events[0]

# Display the different values of this event
print(f"Date: {specific_event.date}")
print(f"Type: {specific_event.type}")
print(f"Machine: {specific_event.machine}")
print(f"User: {specific_event.user}")

# You can change the index [0] to access a different event in the list.

"""Next lets create a function that will return us the 'date' attribute or value. It takes an event object as its input (instance of Event class)
this function will help us sort the list of events happening in chronological order.
"""

def get_event_date(event):
    return event.date

"""We will use this function as the key for

```
# .sort(key=get_event_date)
```
in the next function.

"""

def current_users(events):
  events.sort(key=get_event_date)
  machines = {}
  for event in events:
    if event.machine not in machines:
      machines[event.machine] = set()
    elif event.type == "login" or event.type == "LOGIN":
      machines[event.machine].add(event.user)
    elif event.type == "logout" or event.type == "LOGOUT":
      machines[event.machine].remove(event.user)
  return machines

"""The current_users function first sorts the list of events in order of time, and then iterates through the sorted events, maintaining a dictionary called machines.

- Keys: Machine names (e.g., 'workstation1.local').

- Values: A set of users currently logged in on that machine. A set is used because a user can only be logged in once per machine, and sets efficiently handle adding and removing users.

The function returns the final state of the machines dictionary.
"""

def generate_report(machines):
  for machine, users in machines.items():
    if len(users) > 0:
      user_list = ", ".join(users)
      print(f"{machine} - {user_list}")

"""The generate_report function takes the final machines dictionary and prints a readable summary.

1.  It iterates through each machine and its list of users.

2.    It checks if len(users) > 0: it only proceeds if there is at least one user logged in.

3.  For machines with users, it uses ", ".join(users) to create a comma-separated string of usernames.

4.  It prints the machine name followed by the list of users.

Finally, we have created all the nesseccary functions and class.
Now lets put it all together and see if the code works.
"""

def get_event_date(event):
    return event.date

def current_users(events):
  events.sort(key=get_event_date)
  machines = {}
  for event in events:
    if event.machine not in machines:
      machines[event.machine] = set()
    if event.type == "login" or event.type == "LOGIN":
      machines[event.machine].add(event.user)
    elif event.type == "logout" or event.type == "LOGOUT":
      machines[event.machine].discard(event.user) # Use discard to avoid KeyError
  return machines

def generate_report(machines):
  for machine, users in machines.items():
    if len(users) > 0:
      user_list = ", ".join(users)
      print(f"{machine:<3} {"-":^3} {user_list:3}")

class Event:
  def __init__(self, event_date, event_type, machine_name, user):
    self.date = event_date
    self.type = event_type
    self.machine = machine_name
    self.user = user

events = [
  Event('2020-01-21 12:45:46', 'login', 'myworkstation.local', 'jordan'),
  Event('2020-01-22 15:53:42', 'logout', 'webserver.local', 'jordan'),
  Event('2020-01-21 18:53:21', 'login', 'webserver.local', 'lane'),
  Event('2020-01-22 10:25:34', 'logout', 'myworkstation.local', 'jordan'),
  Event('2020-01-21 08:20:01', 'login', 'webserver.local', 'jordan'),
  Event('2020-01-23 11:24:35', 'login', 'mailserver.local', 'chris'),
]

# We have created a list of events above as the instance of 'Event' class.
# Now lets find how many users are logged into the respective machine at the moment.

users = current_users(events)
print("Current Users :")
print()
print(users)
print()
print("Final report of only loggged in users :")
print()
generate_report(users)